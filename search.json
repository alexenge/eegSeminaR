[{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"install-required-software","dir":"Articles","previous_headings":"","what":"Install required software","title":"Get started","text":"Download recent versions R RStudio: Open downloaded files follow installation instructions unsure, leave default options unchanged","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"download-course-materials","dir":"Articles","previous_headings":"","what":"Download course materials","title":"Get started","text":"Download course materials Unzip directory choice (e.g., “Documents” folder)","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"open-course-materials","dir":"Articles","previous_headings":"","what":"Open course materials","title":"Get started","text":"unzipped folder, double-click RStudio project file (eegSeminaR.Rproj) open new RStudio window “Files” pane (typically lower right-hand part screen), click folder vignettes open first vignette (cm1-introduction--r.Rmd)","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Get started","text":"quick background info EEG event-related potentials (ERPs), see: Luck, S. J. (2022). brief introduction EEG ERPs. Applied event-related potential data analysis. LibreTexts. Open access link","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"intro-milk","dir":"Articles","previous_headings":"","what":"1.1 Intro: Milk","title":"1. Introduction to R","text":"complex tasks, multiple ways achieve certain goal ways effective others Humans don’t always naturally gravitate towards ; often need taught   Figure: Different ways achieving complex tasks.1","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"doing-math","dir":"Articles","previous_headings":"","what":"1.2 Doing math","title":"1. Introduction to R","text":"Think R like fancy pocket calculator: give (numerical) inputs, gives output example: Multiplying two numbers RStudio, hit green ▶️ symbol run R code see output ✍️ EXERCISE Check current temperature Berlin internet. use R convert degrees Celsius degrees Fahrenheit. formula : \\(\\text{°C}\\times1.8+32\\) Replace three dots (...) R code hit green ▶️ symbol run .","code":"42 * 2 ## [1] 84 ..."},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"variables","dir":"Articles","previous_headings":"","what":"1.3 Variables","title":"1. Introduction to R","text":"real power programming languages: Storing output computation intermediate result (variable) can reused next computation assign (define, create) variable choosing custom name (: my_var) arrow symbol (<-) show current value variable: assign show variable , using parentheses: Re-use previously defined variable: ✍️ EXERCISE Re-temperature calculation previous exercise, time storing temperatures two separate variables.","code":"my_var <- 4 + 4 my_var ## [1] 8 (my_other_var <- 3 * 2) ## [1] 6 my_var ^ 2 ## [1] 64 degrees_celsius <- ... (degrees_fahrenheit <- ...)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"data-types","dir":"Articles","previous_headings":"","what":"1.4 Data types","title":"1. Introduction to R","text":"’ve dealt numbers, ’s also types data numeric: number character: string letters (must surrounded quotation marks) logical: logical statements TRUE FALSE check type variable (my_var, defined ): often want store just single value (number, string, etc.) multiple ones vector: list elements, elements type Defined using c() function (“combine”) column vector, row sample (e.g., participant, trial) column given name (part equals sign) Extremely powerful (e.g., list data frames, list lists) ✍️ EXERCISE group, create one vector names another vector heights (cm). Combine two vectors data frame.","code":"13.4 ## [1] 13.4 \"Hello world\" ## [1] \"Hello world\" TRUE ## [1] TRUE class(my_var) ## [1] \"numeric\" c(1, 5, 8, 21) ## [1]  1  5  8 21 data.frame(   country = c(\"Germany\", \"UK\", \"Denmark\"),   population_mil = c(84.1, 67.1, 5.9),   eu_member = c(TRUE, FALSE, TRUE) ) ##   country population_mil eu_member ## 1 Germany           84.1      TRUE ## 2      UK           67.1     FALSE ## 3 Denmark            5.9      TRUE list(\"Hello world!\", 42, c(\"Vector\", \"inside\", \"a\", \"list!\")) ## [[1]] ## [1] \"Hello world!\" ##  ## [[2]] ## [1] 42 ##  ## [[3]] ## [1] \"Vector\" \"inside\" \"a\"      \"list!\" names <- ... heights <- ... (persons <- data.frame(   ...,   ... ))"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"selecting-data","dir":"Articles","previous_headings":"","what":"1.4 Selecting data","title":"1. Introduction to R","text":"often large amounts data want pick subset numeric index n square brackets (: [5]) selects nth (: 5th) element range indices (e.g., 2nd 4th) vector indices (e.g., 1st 3rd) selects multiple elements logical condition selects elements test TRUE Data frames two dimensions (rows columns), need two indices separated comma Select rows (columns) leaving respective index empty Note returns vector , can select records (rows) fulfill certain logical condition ✍️ EXERCISE data frame ToothGrowth dataset built R. contains measured length teeth (column len) 60 guinea pigs receiving different doses Vitamin C (column dose). vitamin C delivered either via ascorbic acid (value \"VC\" column supp) via orange juice (value \"OJ\"). Extract vector tooth lengths guinea pigs received 2 milligrams (maximum dose) vitamin C via orange juice. ’s popular set R packages called “tidyverse”2, includes many functions designed make processing (tabular) data R easier (note ’ll learn R functions packages ). result code often lot readable. example, ’s usual “base” R expression extracting vector dataframe based certain condition: universities[universities$students_k > 20, ]$city. corresponding tidyverse code looks like : universities %>% filter(students_k > 20) %>% pull(city). simplicity, ’ll mostly stick base R functions syntax remainder course – ’ll surely encounter many useful tidyverse functions examples become advanced R programmer.","code":"my_vector <- c(2, 3, 5, 7, 11, 13, 17, 19, 23) my_vector[5] ## [1] 11 my_vector[2:4] ## [1] 3 5 7 my_vector[c(1, 3)] ## [1] 2 5 my_vector[my_vector > 5] ## [1]  7 11 13 17 19 23 universities <- data.frame(   city = c(\"Heidelberg\", \"Leipzig\", \"Rostock\", \"Greifswald\"),   established = c(1386, 1409, 1419, 1456),   students_k = c(31.5, 29.5, 14.0, 12.0) ) universities[1, 3] ## [1] 31.5 universities[2, ] ##      city established students_k ## 2 Leipzig        1409       29.5 universities$established ## [1] 1386 1409 1419 1456 universities[universities$students_k > 20, ] ##         city established students_k ## 1 Heidelberg        1386       31.5 ## 2    Leipzig        1409       29.5 head(ToothGrowth) ##    len supp dose ## 1  4.2   VC  0.5 ## 2 11.5   VC  0.5 ## 3  7.3   VC  0.5 ## 4  5.8   VC  0.5 ## 5  6.4   VC  0.5 ## 6 10.0   VC  0.5 (tooth_lengths <- ToothGrowth[... & ..., ]$...)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"functions","dir":"Articles","previous_headings":"","what":"1.5 Functions","title":"1. Introduction to R","text":"R can lot simple mathematical operations Predefined functions exist many types tasks, e.g., taking mean vector numbers: ’s call different bits pieces using function:  function unique name Arguments inputs want function something argument form argument_name = value first argument function often data – ’s common leave name (making positional argument) Arguments separated commas return value output function gives back us ✍️ EXERCISE Intuitively, one might thought way compute mean four numbers mean(2, 4, 6, 8). doesn’t work? case mean(), functions indeed take arbitrary number positional arguments. example paste(), pastes together multiple character strings one long character string. can check help file function () see function behaves like mean(), single first element (typically called x), like paste(), arbitrary number positional input arguments (indicated ... help file).","code":"my_vector <- c(2, 4, 6, 8) mean(my_vector) ## [1] 5"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"1.6 Getting help","title":"1. Introduction to R","text":"learn function – arguments, return value, examples, etc.: via shortcut: note helps know (part ) function name – , try ask Google (e.g., “averaging numbers R”) ✍️ EXERCISE Find R function create vector random numbers normal distribution. know name function, use create vector 100 numbers mean 500 standard deviation 50.","code":"help(mean) ?mean (random_numbers <- ...)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"packages","dir":"Articles","previous_headings":"","what":"1.7 Packages","title":"1. Introduction to R","text":"R comes “batteries included” – functions many different tasks , specialized tasks, functions often available additional packages can downloaded free internet first need download install package – needs done Next load package – needs done every time restart R session Finally, can use one functions package: can also skip library(\"package_name\") step directly specify package function:","code":"install.packages(\"cowsay\") library(\"cowsay\") say(\"What a cool function!\") ##  ##  --------------  ## What a cool function!  ##  -------------- ##     \\ ##       \\ ##         \\ ##             |\\___/| ##           ==) ^Y^ (== ##             \\  ^  / ##              )=*=( ##             /     \\ ##             |     | ##            /| | | |\\ ##            \\| | |_|/\\ ##       jgs  //_// ___/ ##                \\_) ## cowsay::say(\"This also works!\", by = \"cow\") ##  ##  -----  ## This also works!  ##  ------  ##     \\   ^__^  ##      \\  (oo)\\ ________  ##         (__)\\         )\\ /\\  ##              ||------w| ##              ||      ||"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"1. Introduction to R","text":"McNeill, M. (2015). Base R cheatsheet. RStudio cheatsheets. https://github.com/rstudio/cheatsheets/blob/main/base-r.pdf Navarro, D. (2018). Getting started R. Learning statistics R: tutorial psychology students beginners (pp. 37–71). https://learningstatisticswithr.com/lsr-0.6.pdf","code":""},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"custom-functions","dir":"Articles","previous_headings":"Add-on topics","what":"1.8 Custom functions","title":"1. Introduction to R","text":"addition functions base R published packages, can write function(s): Short functions like can also defined single line: ✍️ EXERCISE Write custom function implements Celsius--Fahrenheit conversion Section 1.2.","code":"say_dude <- function(what, by = \"cat\") {   what <- paste0(what, \", dude!\")   cowsay::say(what, by) } say_dude(\"Nice function\") ##  ##  --------------  ## Nice function, dude!  ##  -------------- ##     \\ ##       \\ ##         \\ ##             |\\___/| ##           ==) ^Y^ (== ##             \\  ^  / ##              )=*=( ##             /     \\ ##             |     | ##            /| | | |\\ ##            \\| | |_|/\\ ##       jgs  //_// ___/ ##                \\_) ## say_dude <- function(what, by = \"cat\") cowsay::say(paste0(what, \", dude!\")) celsius_to_fahrenheit <- ... celsius_to_fahrenheit(19.3)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v1-introduction-to-r.html","id":"repeating-stuff","dir":"Articles","previous_headings":"Add-on topics","what":"1.9 Repeating stuff","title":"1. Introduction to R","text":"often want repeat operation multiple inputs Let’s assume couple friends want create friendly message (stored vector list) naive approach: Better: Using loop Even better: Applying function element Best : Making use R’s vectorization inputs (works simple functions)","code":"messages <- character() messages[1] <- paste(\"Hello\", \"Ezra\") messages[2] <- paste(\"Hello\", \"Tom\") messages[3] <- paste(\"Hello\", \"Samantha\") messages ## [1] \"Hello Ezra\"     \"Hello Tom\"      \"Hello Samantha\" friends <- c(\"Ezra\", \"Tom\", \"Samantha\") messages <- character() for (i in 1:length(friends)) {   messages[i] <- paste(\"Hello\", friends[i]) } messages ## [1] \"Hello Ezra\"     \"Hello Tom\"      \"Hello Samantha\" friends <- c(\"Ezra\", \"Tom\", \"Samantha\") greet <- function(x) paste(\"Hello\", x) (messages <- lapply(friends, greet)) ## [[1]] ## [1] \"Hello Ezra\" ##  ## [[2]] ## [1] \"Hello Tom\" ##  ## [[3]] ## [1] \"Hello Samantha\" friends <- c(\"Ezra\", \"Tom\", \"Samantha\") (messages <- paste(\"Hello\", friends)) ## [1] \"Hello Ezra\"     \"Hello Tom\"      \"Hello Samantha\""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"research-we-can-trust","dir":"Articles","previous_headings":"","what":"2.1 Research we can trust","title":"2. Open data","text":"Figure: replication crisis psychology.1 want (psychological) research findings trustworthy least, researchers repeat experiment analysis able get results  Figure: Terminology trustworthy research.2 Sharing research data helps establish reproducibility robustness Pre-registering one’s analysis sharing materials protocols helps establish replicability generalizability","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"open-research-data","dir":"Articles","previous_headings":"","what":"2.2 Open research data","title":"2. Open data","text":"Others can reproduce analysis Others can probe robustness results Others can analyze research questions Others can use methods development teaching (well-documented) backup data get cited others use data Study participants taxpayers get time money Privacy concerns → Informed consent, pseudonymization Additional effort preparing documenting data Fear getting “scooped”","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"standardizing-data","dir":"Articles","previous_headings":"","what":"2.3 Standardizing data","title":"2. Open data","text":"Brain Imaging Data Standard (BIDS) = standardized way organizing neuroimaging (e.g., fMRI, EEG) data easier sharing reuse  Figure: Example EEG dataset BIDS format.3 Folders organized subjects (sub-001/, sub-002/, etc.), session (ses-01, ses-02, etc., applicable) imaging modality (T1w – structural MRI, func – functional MRI, eeg – EEG recordings, etc.) Raw data files (e.g., .set/.fdt EEG) accompanied metadata .json format Meta-data contains info task, scanner, etc. Additional dataset-wide files like dataset_description.json, participants.tsv, README","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"erp-core-dataset","dir":"Articles","previous_headings":"","what":"2.4 ERP CORE dataset","title":"2. Open data","text":"ERP Compendium Open Resources Experiments (ERP CORE)4 = open dataset data six different EEG experiments experiment optimally designed elicit certain ERP component (later)  Figure: Tasks ERP CORE dataset.5 40 participants (25 female, 15 male, age 21.5 ± 2.9 years) 30 EEG electrodes (10/20 system) + 3 EOG electrodes (eye movements) Sampling rate 1024 Hz (= EEG samples per second)","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"downloading-data","dir":"Articles","previous_headings":"","what":"2.5 Downloading data","title":"2. Open data","text":"Manually Open Science Framework (https://osf.io/thsqg/) using R package erpcore6 Start creating empty data directory () function package creates relative file paths, hence reproducible different machines operating systems erpcore package still development → Must installed GitHub instead CRAN Download ERP CORE data using erpcore: component = \"n170\" get data face perception (N170) experiment type = \"bids\" type get data BIDS format download one 40 subjects now ✍️ EXERCISE Open data/n170 directory file explorer take look different files downloaded. Can figure purpose ?","code":"(data_dir <- here::here(\"data/n170\")) ## [1] \"/home/runner/work/eegSeminaR/eegSeminaR/data/n170\" dir.create(data_dir, recursive = TRUE) install.packages(\"remotes\") remotes::install_github(\"alexenge/erpcore\") erpcore::get_erpcore(   component = \"n170\",   dest_path = data_dir,   type = \"bids\",   subjects = \"sub-001\" )"},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"2. Open data","text":"Gewin, V. (2016). Data sharing: open mind open data. Nature, 529(7584), Article 7584. https://doi.org/10.1038/nj7584-117a Kathawalla, U.-K., Silverstein, P., & Syed, M. (2021). Easing Open Science: guide graduate students advisors. Collabra: Psychology, 7(1). https://doi.org/10.1525/collabra.18684 Pernet, C. R., Appelhoff, S., Gorgolewski, K. J., Flandin, G., Phillips, C., Delorme, ., & Oostenveld, R. (2019). EEG-BIDS, extension Brain Imaging Data Structure electroencephalography. Scientific Data, 6(1), Article 1. https://doi.org/10.1038/s41597-019-0104-8","code":""},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/articles/v2-open-data.html","id":"version-control","dir":"Articles","previous_headings":"Add-on topics","what":"2.6 Version control","title":"2. Open data","text":"full transparency reproducibility, need share just data also code Ideally just final version (e.g., upload script OSF), full history Also helpful future self understand couple months ago Version control tools like git powerful : Make project folder git repository Write/edit code Take snapshot (“commit”) code ’re happy Include helpful commit message future self collaborators Try new stuff always able revert previous commit  Figure: Tracking history code using git commits (circles) branches (arrows)7 Code git repositories can shared online websites like GitHub GitLab Details beyond scope course, great intro see “Happy git R”8","code":""},{"path":"https://alexenge.github.io/eegSeminaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Enge. Author, maintainer, copyright holder.","code":""},{"path":"https://alexenge.github.io/eegSeminaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Enge (2022). eegSeminaR: Seminar Analyzing EEG Data R. https://github.com/alexenge/eegSeminaR, https://alexenge.github.io/eegSeminaR/.","code":"@Manual{,   title = {eegSeminaR: A Seminar on Analyzing EEG Data in R},   author = {Alexander Enge},   year = {2022},   note = {https://github.com/alexenge/eegSeminaR, https://alexenge.github.io/eegSeminaR/}, }"},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"id_-welcome","dir":"","previous_headings":"","what":"👋 Welcome","title":"A Seminar on Analyzing EEG Data in R","text":"MSc-level university seminar analyzing EEG data R. follows “code first” approach teach basics event-related potential (ERP) analysis, raw data statistical modeling visualization. code examples draw heavily eegUtils package.1","code":""},{"path":[]},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"a-interactive--local-recommended","dir":"","previous_headings":"🤗️ How to follow along","what":"a) Interactive – local (recommended)","title":"A Seminar on Analyzing EEG Data in R","text":"Follow instructions “Get started” page download install required software","code":""},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"b-interactive--cloud-server","dir":"","previous_headings":"🤗️ How to follow along","what":"b) Interactive – cloud server","title":"A Seminar on Analyzing EEG Data in R","text":"Hit link (“Launch binder” button) open course materials cloud server kindly provided Binder project Note : () Launching cloud server might take couple minutes, (b) resources (CPUs memory) limited, (c) changes make code lost end session","code":""},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"c-static","dir":"","previous_headings":"🤗️ How to follow along","what":"c) Static","title":"A Seminar on Analyzing EEG Data in R","text":"Read static version course contents (“vignettes”) web browser allow run /modify code","code":""},{"path":"https://alexenge.github.io/eegSeminaR/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://alexenge.github.io/eegSeminaR/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://alexenge.github.io/eegSeminaR/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> [1] \"Hello, world!\""}]

[{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"intro-milk","dir":"Articles","previous_headings":"","what":"1.1 Intro: Milk","title":"1. Introduction to R","text":"complex tasks, multiple ways achieve certain goal ways effective others Humans don’t always naturally gravitate towards ; often need taught   Figure: Different ways achieving complex tasks.1","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"doing-math","dir":"Articles","previous_headings":"","what":"1.2 Doing math","title":"1. Introduction to R","text":"Think R like fancy pocket calculator: give (numerical) inputs, gives output example: Multiplying two numbers RStudio, hit green ▶️ symbol run R code see output ✍️ EXERCISE Check current temperature Berlin internet. use R convert degrees Celsius degrees Fahrenheit. formula : \\(\\text{°C}\\times1.8+32\\) Replace three dots (...) R code hit green ▶️ symbol run .","code":"42 * 2 ## [1] 84 ..."},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"variables","dir":"Articles","previous_headings":"","what":"1.3 Variables","title":"1. Introduction to R","text":"real power programming languages: Storing output computation intermediate result (variable) can reused next computation assign (define, create) variable choosing custom name (: my_var) arrow symbol (<-) show current value variable: assign show variable , using parentheses: Re-use previously defined variable: ✍️ EXERCISE Re-temperature calculation Exercise 1.1, time storing temperatures two separate variables.","code":"my_var <- 4 + 4 my_var ## [1] 8 (my_other_var <- 3 * 2) ## [1] 6 my_var ^ 2 ## [1] 64 degrees_celsius <- ... (degrees_fahrenheit <- ...)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"data-types","dir":"Articles","previous_headings":"","what":"1.4 Data types","title":"1. Introduction to R","text":"’ve dealt numbers, ’s also types data numeric: number character: string letters (must surrounded quotation marks) logical: logical statements TRUE FALSE check type variable (my_var, defined ): often want store just single value (number, string, etc.) multiple ones vector: list elements, elements type Defined using c() function (“combine”) column vector column given name (part equals sign) Extremely powerful (e.g., list data frames, list lists) ✍️ EXERCISE group, create one vector names another vector heights (cm). Combine two vectors data frame.","code":"13.4 ## [1] 13.4 \"Hello world\" ## [1] \"Hello world\" TRUE ## [1] TRUE class(my_var) ## [1] \"numeric\" c(1, 5, 8, 21) ## [1]  1  5  8 21 data.frame(   country = c(\"Germany\", \"UK\", \"Denmark\"),   population_mil = c(84.1, 67.1, 5.9),   eu_member = c(TRUE, FALSE, TRUE) ) ##   country population_mil eu_member ## 1 Germany           84.1      TRUE ## 2      UK           67.1     FALSE ## 3 Denmark            5.9      TRUE list(\"Hello world!\", 42, c(\"Vector\", \"inside\", \"a\", \"list!\")) ## [[1]] ## [1] \"Hello world!\" ##  ## [[2]] ## [1] 42 ##  ## [[3]] ## [1] \"Vector\" \"inside\" \"a\"      \"list!\" names <- ... heights <- ... (persons <- data.frame(   ...,   ... ))"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"selecting-data","dir":"Articles","previous_headings":"","what":"1.4 Selecting data","title":"1. Introduction to R","text":"often large amounts data want pick subset numeric index n square brackets (: [5]) selects nth (: 5th) element range indices (e.g., 2nd 4th) vector indices (e.g., 1st 3rd) selects multiple elements logical condition selects elements test TRUE Data frames two dimensions (rows columns), need two indices separated comma Select rows (columns) leaving respective index empty Note returns vector , can select records (rows) fulfill certain logical condition ✍️ EXERCISE data frame ToothGrowth dataset built R. contains measured length teeth (column len) 60 guinea pigs receiving different doses Vitamin C (column dose). vitamin C delivered either via ascorbic acid (value \"VC\" column supp) via orange juice (value \"OJ\"). Extract vector tooth lengths guinea pigs received 2 milligrams (maximum dose) vitamin C via orange juice. ’s popular set R packages called “tidyverse”2, includes many functions designed make processing (tabular) data R easier (note ’ll learn R functions packages ). result code often lot readable. example, ’s usual “base” R expression extracting vector dataframe based certain condition : universities[universities$students_k > 20, ]$city. corresponding tidiverse version looks like : universities %>% filter(students_k > 20) %>% pull(city). simplicity, ’ll mostly stick base R functions syntax remainder course – ’ll surely encounter many useful tidyverse functions examples become advanced R programmer.","code":"my_vector <- c(2, 3, 5, 7, 11, 13, 17, 19, 23) my_vector[5] ## [1] 11 my_vector[2:4] ## [1] 3 5 7 my_vector[c(1, 3)] ## [1] 2 5 my_vector[my_vector > 5] ## [1]  7 11 13 17 19 23 universities <- data.frame(   city = c(\"Heidelberg\", \"Leipzig\", \"Rostock\", \"Greifswald\"),   established = c(1386, 1409, 1419, 1456),   students_k = c(31.5, 29.5, 14.0, 12.0) ) universities[1, 3] ## [1] 31.5 universities[2, ] ##      city established students_k ## 2 Leipzig        1409       29.5 universities$established ## [1] 1386 1409 1419 1456 universities[universities$students_k > 20, ] ##         city established students_k ## 1 Heidelberg        1386       31.5 ## 2    Leipzig        1409       29.5 head(ToothGrowth) ##    len supp dose ## 1  4.2   VC  0.5 ## 2 11.5   VC  0.5 ## 3  7.3   VC  0.5 ## 4  5.8   VC  0.5 ## 5  6.4   VC  0.5 ## 6 10.0   VC  0.5 (tooth_lengths <- ToothGrowth[... & ..., ]$...)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"functions","dir":"Articles","previous_headings":"","what":"1.5 Functions","title":"1. Introduction to R","text":"R can lot simple mathematical operations Predefined functions exist many types tasks, e.g., taking mean vector numbers: ’s call different bits pieces using function:  function unique name Arguments functions inputs want function something argument form argument_name = value first argument function often data; ’s common leave name (making positional argument) Arguments separated commas return value output function gives back us ✍️ EXERCISE Intuitively, one might thought way compute mean four numbers mean(2, 4, 6, 8). doesn’t work? case mean(), functions indeed take arbitrary number positional arguments. example paste(), pastes together multiple character strings one long character string. can check help file function () see function behaves like mean(), single first element (typically called x), like paste(), arbitrary number positional input arguments (indicated ... help file).","code":"my_vector <- c(2, 4, 6, 8) mean(my_vector) ## [1] 5"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"1.6 Getting help","title":"1. Introduction to R","text":"learn function – arguments, return value, examples, etc.: via shortcut: note helps know (part ) function name – , try ask Google (e.g., “averaging numbers R”) ✍️ EXERCISE Find R function create vector random numbers normal distribution. know name function, use create vector 100 numbers mean 500 standard deviation 50.","code":"help(mean) ?mean (random_numbers <- ...)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"packages","dir":"Articles","previous_headings":"","what":"1.7 Packages","title":"1. Introduction to R","text":"R comes “batteries included” – functions many different tasks , specialized tasks, functions often available additional packages can downloaded free internet first need download install package – needs done Next load package – needs done every time restart R session Finally, can use one functions package: can also skip library(\"package_name\") step directly specify package function:","code":"install.packages(\"cowsay\") library(\"cowsay\") say(\"What a cool function!\") ##  ##  --------------  ## What a cool function!  ##  -------------- ##     \\ ##       \\ ##         \\ ##             |\\___/| ##           ==) ^Y^ (== ##             \\  ^  / ##              )=*=( ##             /     \\ ##             |     | ##            /| | | |\\ ##            \\| | |_|/\\ ##       jgs  //_// ___/ ##                \\_) ## cowsay::say(\"This also works!\", by = \"cow\") ##  ##  -----  ## This also works!  ##  ------  ##     \\   ^__^  ##      \\  (oo)\\ ________  ##         (__)\\         )\\ /\\  ##              ||------w| ##              ||      ||"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"1. Introduction to R","text":"McNeill, M. (2015). Base R cheatsheet. RStudio cheatsheets. https://github.com/rstudio/cheatsheets/blob/main/base-r.pdf Navarro, D. (2018). Getting started R. Learning statistics R: tutorial psychology students beginners (pp. 37–71). https://learningstatisticswithr.com/lsr-0.6.pdf","code":""},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"custom-functions","dir":"Articles","previous_headings":"Add-on topics","what":"1.8 Custom functions","title":"1. Introduction to R","text":"addition functions base R published packages, can write function(s): Short functions like can also defined single line: ✍️ EXERCISE Write custom function implements Celsius--Fahrenheit conversion Section 1.1.","code":"say_dude <- function(what, by = \"cat\") {   what <- paste0(what, \", dude!\")   cowsay::say(what, by) } say_dude(\"Nice function\") ##  ##  --------------  ## Nice function, dude!  ##  -------------- ##     \\ ##       \\ ##         \\ ##             |\\___/| ##           ==) ^Y^ (== ##             \\  ^  / ##              )=*=( ##             /     \\ ##             |     | ##            /| | | |\\ ##            \\| | |_|/\\ ##       jgs  //_// ___/ ##                \\_) ## say_dude <- function(what, by = \"cat\") cowsay::say(paste0(what, \", dude!\")) celsius_to_fahrenheit <- ... celsius_to_fahrenheit(19.3)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm1-introduction-to-r.html","id":"repeating-stuff","dir":"Articles","previous_headings":"Add-on topics","what":"1.9 Repeating stuff","title":"1. Introduction to R","text":"often want repeat operation multiple inputs Let’s assume couple friends want create friendly message (stored vector list) naive approach: Better: Using loop Even better: Applying function element Best : Making use R’s vectorization inputs (works simple functions)","code":"messages <- character() messages[1] <- paste(\"Hello\", \"Ezra\") messages[2] <- paste(\"Hello\", \"Tom\") messages[3] <- paste(\"Hello\", \"Samantha\") messages ## [1] \"Hello Ezra\"     \"Hello Tom\"      \"Hello Samantha\" friends <- c(\"Ezra\", \"Tom\", \"Samantha\") messages <- character() for (i in 1:length(friends)) {   messages[i] <- paste(\"Hello\", friends[i]) } messages ## [1] \"Hello Ezra\"     \"Hello Tom\"      \"Hello Samantha\" friends <- c(\"Ezra\", \"Tom\", \"Samantha\") greet <- function(x) paste(\"Hello\", x) (messages <- lapply(friends, greet)) ## [[1]] ## [1] \"Hello Ezra\" ##  ## [[2]] ## [1] \"Hello Tom\" ##  ## [[3]] ## [1] \"Hello Samantha\" friends <- c(\"Ezra\", \"Tom\", \"Samantha\") (messages <- paste(\"Hello\", friends)) ## [1] \"Hello Ezra\"     \"Hello Tom\"      \"Hello Samantha\""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"research-we-can-trust","dir":"Articles","previous_headings":"","what":"2.1 Research we can trust","title":"2. Open data","text":"Figure: replication crisis psychology.1 want (psychological) research findings trustworthy least, researchers repeat experiment analysis able get results  Figure: Terminology trustworthy research.2 Sharing research data helps establish reproducibility robustness Pre-registering one’s analysis sharing materials protocols helps establish replicability generalizability","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"open-research-data","dir":"Articles","previous_headings":"","what":"2.2 Open research data","title":"2. Open data","text":"Others can reproduce analysis Others can probe robustness results Others can analyze research questions Others can use methods development teaching (well-documented) backup data get cited others use data Study participants taxpayers get time money Privacy concerns → Informed consent, pseudonymization Additional effort preparing documenting data Fear getting “scooped”","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"standardizing-data","dir":"Articles","previous_headings":"","what":"2.3 Standardizing data","title":"2. Open data","text":"Brain Imaging Data Standard (BIDS) = standardized way organizing neuroimaging (e.g., fMRI, EEG) data easier sharing reuse  Figure: Example EEG dataset BIDS format.3 Folders organized subjects (sub-001/, sub-002/, etc.), session (ses-01, ses-02, etc., applicable) imaging modality (T1w – structural MRI, func – functional MRI, eeg – EEG recordings, etc.) Raw data files (e.g., .set/.fdt EEG) accompanied metadata (e.g., .json format) Meta-data contains info task, scanner, etc. Additional dataset-wide files like dataset_description.json, participants.tsv, README","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"erp-core-dataset","dir":"Articles","previous_headings":"","what":"2.4 ERP CORE dataset","title":"2. Open data","text":"ERP Compendium Open Resources Experiments (ERP CORE)4 = open dataset data six different EEG experiments experiment optimally designed elicit certain ERP component (later)  Figure: Tasks ERP CORE dataset.5 experiment completed 40 participants (25 female, 15 male, age 21.5 ± 2.9 years) 30 EEG electrodes (10/20 system) + 3 EOG electrodes (eye movements) Sampling rate (= number recorded EEG voltages per second) 1024 Hz","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"downloading-data","dir":"Articles","previous_headings":"","what":"2.5 Downloading data","title":"2. Open data","text":"Manually Open Science Framework (https://osf.io/thsqg/) using R package erpcore6 Start creating empty data directory () function package create relative file paths (hence reproducible different machines operating systems) erpcore package still development → Must installed GitHub instead CRAN Download ERP CORE data using erpcore: component = \"n170\" get data face percetion (N170) experiment type = \"bids\" type get data BIDS format download first 40 subjects now ✍️ EXERCISE Open data/n170 directory file explorer take look different files downloaded. Can figure purpose ?","code":"(data_dir <- here::here(\"data/n170\")) ## [1] \"/home/runner/work/eegSeminaR/eegSeminaR/data/n170\" dir.create(data_dir, recursive = TRUE) install.packages(\"remotes\") remotes::install_github(\"alexenge/erpcore\") erpcore::get_erpcore(   component = \"n170\",   dest_path = data_dir,   type = \"bids\",   subjects = \"sub-001\" )"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"2. Open data","text":"Gewin, V. (2016). Data sharing: open mind open data. Nature, 529(7584), Article 7584. https://doi.org/10.1038/nj7584-117a Kathawalla, U.-K., Silverstein, P., & Syed, M. (2021). Easing Open Science: guide graduate students advisors. Collabra: Psychology, 7(1). https://doi.org/10.1525/collabra.18684 Pernet, C. R., Appelhoff, S., Gorgolewski, K. J., Flandin, G., Phillips, C., Delorme, ., & Oostenveld, R. (2019). EEG-BIDS, extension Brain Imaging Data Structure electroencephalography. Scientific Data, 6(1), Article 1. https://doi.org/10.1038/s41597-019-0104-8","code":""},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm2-open-data.html","id":"version-control","dir":"Articles","previous_headings":"Add-on topics","what":"2.6 Version control","title":"2. Open data","text":"full transparency reproducibility, need share just data also code Ideally just final version (e.g., upload script OSF), full history Also helpful future self understand 6 months ago Version control tools like git powerful : Make project folder git repository Write/edit code Take snapshot (“commit”) code ’re happy Include helpful commit message future self collaborators Try new stuff always able revert previous commit  Figure: Tracking history code using git commits (circles) branches (arrows)7 Code git repositories can shared online websites like GitHub GitLab Details beyond scope course, great intro see “Happy git R”8","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"intro-recipes","dir":"Articles","previous_headings":"","what":"3.1 Intro: Recipes","title":"3. Preprocessing","text":"Data analysis like cooking: take raw ingredients (data) transform according semi-standardized recipe tasty meal (academic paper thesis) Every step recipe affords “researchers degrees freedom” – problematic undisclosed1  Figure 3.1 Every review every recipe internet ever.2","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"3.2 Loading data","title":"3. Preprocessing","text":"Loading required packages: working file paths eegUtils3 working EEG data Downloaded ERP CORE data data/n170 (see Section 2.6) Data BIDS format; subject ’s sub-XXX/eeg sub-directory need find .set file loading EEG data: eegUtils functions loading (“importing”) raw EEG data various file formats R, including .set format used ERP CORE See type data ’ve got: eeg_data custom class defined eegUtils – big list many sub-components: actual EEG data data frame callsed signals row one sample (time point)4 column one channel (EEG/EOG electrode) value EEG voltage (microvolts; µV) measured time sample channel elements contain useful meta-information, used later sections","code":"library(here) library(eegUtils) bids_dir <- here(\"data/n170\") set_file <- here(bids_dir, \"sub-001\", \"eeg\", \"sub-001_task-N170_eeg.set\") file.exists(set_file) ## [1] TRUE (dat_raw <- import_set(set_file)) ## Importing from EEGLAB .set file. ## Importing data from .fdt file. ## EEG data ##  ## Number of channels   : 33  ## Electrode names      : FP1 F3 F7 FC3 C3 C5 P3 P7 P9 PO7 PO3 O1 Oz Pz CPz FP2 Fz F4 F8 FC4 FCz Cz C4 C6 P4 P8 P10 PO8 PO4 O2 HEOG_left HEOG_right VEOG_lower  ## Sampling rate        : 1024 Hz ## Reference        :  ## Signal length: 0 682.999 seconds class(dat_raw) ## [1] \"eeg_data\" str(dat_raw) ## List of 8 ##  $ signals  :'data.frame':   699392 obs. of  33 variables: ##   ..$ FP1       : num [1:699392] -2503 -2502 -2502 -2503 -2504 ... ##   ..$ F3        : num [1:699392] 1898 1899 1896 1897 1895 ... ##   ..$ F7        : num [1:699392] 12316 12314 12310 12308 12305 ... ##   ..$ FC3       : num [1:699392] 2694 2696 2695 2695 2693 ... ##   ..$ C3        : num [1:699392] 3794 3794 3794 3794 3793 ... ##   ..$ C5        : num [1:699392] 7308 7308 7308 7309 7308 ... ##   ..$ P3        : num [1:699392] -328 -328 -329 -329 -329 ... ##   ..$ P7        : num [1:699392] -471 -471 -472 -472 -473 ... ##   ..$ P9        : num [1:699392] 250 252 252 249 246 ... ##   ..$ PO7       : num [1:699392] -2770 -2767 -2765 -2762 -2763 ... ##   ..$ PO3       : num [1:699392] -3285 -3285 -3284 -3283 -3283 ... ##   ..$ O1        : num [1:699392] -6382 -6383 -6383 -6380 -6377 ... ##   ..$ Oz        : num [1:699392] -5855 -5852 -5848 -5846 -5847 ... ##   ..$ Pz        : num [1:699392] 3699 3699 3698 3699 3699 ... ##   ..$ CPz       : num [1:699392] 1347 1347 1345 1345 1345 ... ##   ..$ FP2       : num [1:699392] 959 962 965 967 967 ... ##   ..$ Fz        : num [1:699392] 9392 9393 9392 9392 9391 ... ##   ..$ F4        : num [1:699392] 4989 4989 4990 4990 4989 ... ##   ..$ F8        : num [1:699392] 9311 9311 9311 9311 9309 ... ##   ..$ FC4       : num [1:699392] 8402 8403 8404 8405 8403 ... ##   ..$ FCz       : num [1:699392] 5594 5595 5595 5596 5594 ... ##   ..$ Cz        : num [1:699392] 171 171 171 170 168 ... ##   ..$ C4        : num [1:699392] 4092 4093 4093 4093 4092 ... ##   ..$ C6        : num [1:699392] 1757 1758 1758 1758 1756 ... ##   ..$ P4        : num [1:699392] -1050 -1049 -1050 -1050 -1051 ... ##   ..$ P8        : num [1:699392] -3165 -3161 -3160 -3160 -3161 ... ##   ..$ P10       : num [1:699392] 22439 22441 22442 22445 22446 ... ##   ..$ PO8       : num [1:699392] -5183 -5177 -5172 -5167 -5166 ... ##   ..$ PO4       : num [1:699392] -5888 -5886 -5885 -5885 -5885 ... ##   ..$ O2        : num [1:699392] -4763 -4760 -4760 -4757 -4753 ... ##   ..$ HEOG_left : num [1:699392] 5347 5343 5334 5327 5322 ... ##   ..$ HEOG_right: num [1:699392] 4003 4003 4002 4000 3996 ... ##   ..$ VEOG_lower: num [1:699392] 4875 4875 4874 4871 4868 ... ##  $ srate    : num 1024 ##  $ events   : tibble [640 × 4] (S3: tbl_df/tbl/data.frame) ##   ..$ event_type : num [1:640] 202 202 79 201 73 201 75 201 112 201 ... ##   ..$ event_onset: num [1:640] 1682 11029 15412 16091 16998 ... ##   ..$ urevent    : num [1:640] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ event_time : num [1:640] 1.64 10.77 15.05 15.71 16.6 ... ##  $ chan_info:'data.frame':   33 obs. of  9 variables: ##   ..$ electrode: chr [1:33] \"FP1\" \"F3\" \"F7\" \"FC3\" ... ##   ..$ radius   : num [1:33] 1 1 1 1 1 1 1 1 1 1 ... ##   ..$ theta    : num [1:33] NA NA NA NA NA NA NA NA NA NA ... ##   ..$ phi      : num [1:33] NA NA NA NA NA NA NA NA NA NA ... ##   ..$ cart_x   : int [1:33] NA NA NA NA NA NA NA NA NA NA ... ##   ..$ cart_y   : logi [1:33] NA NA NA NA NA NA ... ##   ..$ cart_z   : logi [1:33] NA NA NA NA NA NA ... ##   ..$ x        : num [1:33] NA NA NA NA NA NA NA NA NA NA ... ##   ..$ y        : num [1:33] NA NA NA NA NA NA NA NA NA NA ... ##  $ timings  : tibble [699,392 × 2] (S3: tbl_df/tbl/data.frame) ##   ..$ time  : num [1:699392] 0 0.000977 0.001953 0.00293 0.003906 ... ##   ..$ sample: int [1:699392] 1 2 3 4 5 6 7 8 9 10 ... ##  $ reference: NULL ##  $ epochs   : epoch_nf [1 × 3] (S3: epoch_info/tbl_df/tbl/data.frame) ##   ..$ epoch         : int 1 ##   ..$ participant_id: chr \"sub-001_task-N170_eeg\" ##   ..$ recording     : chr \"sub-001_task-N170_eeg\" ##  $ version  :Classes 'package_version', 'numeric_version'  hidden list of 1 ##   ..$ : int [1:3] 0 7 0 ##  - attr(*, \"class\")= chr \"eeg_data\""},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"viewing-data","dir":"Articles","previous_headings":"","what":"3.3 Viewing data","title":"3. Preprocessing","text":"Usually good idea visually check data outset data analysis multiple steps throughout Check multiple time points (“Display start time”) switch “Individual” view, plotting channels one another, “Butterfly” view, plotting channels top Remember click “Done” able continue running next piece code ✍️ EXERCISE 3.3 Inspect data different time points channels. Note features data find interesting potentially relevant deal analysis.","code":"browse_data(dat_raw)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"channel-locations","dir":"Articles","previous_headings":"","what":"3.4 Channel locations","title":"3. Preprocessing","text":"steps (e.g., making plots) require R know relative positions electrodes scalp Sometimes included raw data, need use separate function: \"biosemi64\" locations provided eegUtils, also used electrodes.tsv file BIDS structure","code":"dat_raw <- electrode_locations(dat_raw, montage = \"biosemi64\", overwrite = TRUE) ## Electrodes not found: HEOG_left HEOG_right VEOG_lower dat_raw$chan_info ## # A tibble: 33 × 9 ##    electrode radius theta   phi cart_x cart_y cart_z     x     y ##    <chr>      <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl> <dbl> <dbl> ##  1 FP1            1   -92   -72  -26.2   80.8  -2.97 -28.4  87.5 ##  2 F3             1   -60   -51  -46.3   57.2  42.5  -37.8  46.6 ##  3 F7             1   -92   -36  -68.7   49.9  -2.97 -74.4  54.1 ##  4 FC3            1   -50   -28  -57.5   30.6  54.6  -44.2  23.5 ##  5 C3             1   -46     0  -61.1    0    59.0  -46     0   ##  6 C5             1   -69     0  -79.4    0    30.5  -69     0   ##  7 P3             1   -60    51  -46.3  -57.2  42.5  -37.8 -46.6 ##  8 P7             1   -92    36  -68.7  -49.9  -2.97 -74.4 -54.1 ##  9 P9             1  -115    36  -62.3  -45.3 -35.9  -93.0 -67.6 ## 10 PO7            1   -92    54  -49.9  -68.7  -2.97 -54.1 -74.4 ## # … with 23 more rows plot_electrodes(dat_raw, interact = TRUE)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"re-referencing","dir":"Articles","previous_headings":"","what":"3.5 Re-referencing","title":"3. Preprocessing","text":"recording (“online”), electrode measuring difference voltage compared reference electrode preprocessing (“offline”), typically choose new reference: Average reference: Comparing voltage average scalp channels (excluding EOG, EMG, etc.) Linked mastoids: Comparing voltage average mastoid channels (M1 M2)  Figure 3.5 Different reference schemes.5","code":"eog_channels <- c(\"HEOG_left\", \"HEOG_right\", \"VEOG_lower\") dat_reref <- eeg_reference(dat_raw, ref_chans = \"average\", exclude = eog_channels)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"filtering","dir":"Articles","previous_headings":"","what":"3.6 Filtering","title":"3. Preprocessing","text":"frequency (Hz) sine wave describes fast repeats  Figure 3.6 Summing sine waves time domain corresponding spectrum frequency domain.6 EEG consists different types activity different frequencies: brain activity detectable EEG happens 0.1–30 Hz Filterting used remove unwanted parts signal: Converting time-domain EEG frequency domain (Fourier transform) low-pass filter removes fast frequencies (e.g., > 30 Hz) high-pass filter remove slow frequencies (e.g., < 0.1 Hz) band-pass filter combines low-pass filter high-pass filter band-stop filter removes narrow frequency range (e.g., around 50 Hz) Converting “cleaned” signal back time domain ✍️ EXERCISE 3.5 Use data browser compare filtered data raw (downsampled) data certain time point. Repeat filtering step making one two cutoff frequencies aggressive (, make either lower cutoff frequency higher higher cutoff frequency lower). advantages disadvantages ? 💡 NOTE: ’s lot filters idea code filtering looks relatively simple, actually huge topic active area research debate. many different types filters many parameters just cutoff frequency (e.g., filter length, transition bandwith, delay, direction). parameters choosen filter () removes much unwanted signals possible (b) distorting part signal care . example, shown using low-pass filter high cutoff (e.g., 1 Hz instead 0.1 Hz) can introduce artificial “bumps” data can mistaken true ERP components.7  Let’s save preprocessed (, cleand filtered) data next step8","code":"dat_filt <- eeg_filter(dat_reref, low_freq = 0.1, high_freq = 30.0) ## Band-pass FIR filter from 0.1 - 30 Hz ## Transition bandwidth: 0.1 Hz ## Filter order: 33792 ## Removing channel means... ... deriv_dir <- here(bids_dir, \"derivatives\", \"eegUtils\", \"sub-001\", \"eeg\") preproc_file <- here(deriv_dir, \"sub-001_task-N170_desc-preprocessed_eeg.rds\") dir.create(deriv_dir, recursive = TRUE) saveRDS(dat_filt, preproc_file)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"3. Preprocessing","text":"Newman, . J., Godfrey, D., & Post, R. (2022). EEG-ERP Preprocessing. Data Science Psychology Neuroscience – Python. Dalhousie University. https://neuraldatascience.io/7-eeg/erp_preprocessing.html","code":""},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm3-preprocessing.html","id":"downsampling","dir":"Articles","previous_headings":"Add-on topics","what":"3.7 Downsampling","title":"3. Preprocessing","text":"sampling rate defines number EEG voltages recorded per second (= Hertz) means pair samples less 1 ms apart! typically don’t need much temporal resolution,9 often useful downsample data reduces computer’s memory load make subsequent computations faster  Figure 3.4 Moderate downsampling typically doesn’t affect look behavior data.10","code":"dat_raw$srate ## [1] 1024 1 / dat_raw$srate ## [1] 0.0009765625 dat_downs <- eeg_downsample(dat_filt, q = 4.0) # q is the downsampling factor ## Downsampling from 1024Hz to 256Hz. show_size_mb <- function(x) format(object.size(x), units = \"MB\") lapply(list(before = dat_filt, after = dat_downs), show_size_mb) ## $before ## [1] \"184.1 Mb\" ##  ## $after ## [1] \"46.1 Mb\" saveRDS(dat_downs, preproc_file)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm4-creating-epochs.html","id":"read-raw-data","dir":"Articles","previous_headings":"","what":"4.1 Read raw data","title":"4. Creating epochs","text":"","code":"library(here) library(eegUtils) bids_dir <- here(\"data\", \"n170\") deriv_dir <- here(bids_dir, \"derivatives\", \"eegUtils\", \"sub-001\", \"eeg\") preproc_file <- here(deriv_dir, \"sub-001_task-N170_desc-preprocessed_eeg.rds\") dat_filt <- readRDS(preproc_file)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm4-creating-epochs.html","id":"event-codes","dir":"Articles","previous_headings":"","what":"4.2 Event codes","title":"4. Creating epochs","text":"✍️ EXERCISE 4.2 Can come different way construct epoch_labels vector? ’s tip get stuck.1","code":"events_file <- here(bids_dir, \"task-N170_events.json\") file.edit(events_file) event_codes <- c(1:80) epoch_labels <- ifelse(event_codes <= 40, \"face\", \"car\") ..."},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm4-creating-epochs.html","id":"construct-epochs","dir":"Articles","previous_headings":"","what":"4.3 Construct epochs","title":"4. Creating epochs","text":"✍️ EXERCISE 4.3 Check epochs timings tables new object. Compare ones continuous (clean) data.","code":"dat_epo <- epoch_data(   dat_filt,   event_codes,   time_lim = c(-0.2, 0.8),   epoch_labels = epoch_labels ) ## Adjusting output limits to match sampling rate. ## Output limits:  -0.19921875 0.80078125 ## No baseline removal performed. ## Creating 160 epochs. ... erp_image(dat_epo, electrode = \"PO4\")"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm4-creating-epochs.html","id":"baseline-correction","dir":"Articles","previous_headings":"","what":"4.4 Baseline correction","title":"4. Creating epochs","text":"✍️ EXERCISE 4.? Confirm average voltage baseline window actually zero single epoch channel. One approach : Take baselined epochs (1) get relevant indices (one epoch, baseline time points) timings table, (2) Extract one channel (column) signals table index index vector, (3) compute mean signals. Let’s save baseline-corrected epochs can re-use next notebook:","code":"dat_basl <- rm_baseline(dat_epo, c(-0.2, 0.0)) ## Baseline: -0.2 sBaseline: 0 s erp_image(dat_basl, electrode = \"PO4\") baseline_ixs <- with(dat_basl$timings, epoch == ... & time < 0.0) baseline_signals <- ... ...(baseline_signals) epoch_file <- here(deriv_dir, \"sub-001_task-N170_desc-epoched_eeg.rds\") saveRDS(dat_basl, epoch_file)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm5-dealing-with-artifacts.html","id":"read-epoched-data","dir":"Articles","previous_headings":"","what":"5.1 Read epoched data","title":"4. Creating epochs","text":"","code":"library(here) library(eegUtils) bids_dir <- here(\"data\", \"n170\") deriv_dir <- here(bids_dir, \"derivatives\", \"eegUtils\", \"sub-001\", \"eeg\") epoch_file <- here(deriv_dir, \"sub-001_task-N170_desc-epoched_eeg.rds\") dat_basl <- readRDS(epoch_file)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm5-dealing-with-artifacts.html","id":"independent-component-analysis","dir":"Articles","previous_headings":"","what":"5.2 Independent component analysis","title":"4. Creating epochs","text":"","code":"n_components <- 15 ica <- run_ICA(dat_basl, method = \"fastica\", pca = n_components) ## Reducing data to 15 dimensions using PCA. ## Running fastica (ica). view_ica(ica) heog <- c(\"HEOG_left\", \"HEOG_right\") veog <- c(\"FP2\", \"VEOG_lower\") (bad_components <- ar_eogcor(ica, dat_basl, heog, veog)) ## Estimated HEOG threshold: 1 ## Estimated VEOG threshold: 1.06 ## character(0) heog <- c(\"HEOG_left\", \"HEOG_right\") veog <- c(\"FP2\", \"VEOG_lower\") (bad_components <- ar_eogcor(ica, dat_basl, heog, veog, threshold = 0.5)) ## [1] \"Comp001\" \"Comp009\" dat_icacor <- apply_ica(dat_basl, ica, comps = bad_components)"},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/articles/cm5-dealing-with-artifacts.html","id":"regression","dir":"Articles","previous_headings":"","what":"5.4 Regression","title":"4. Creating epochs","text":"","code":"dat_eogreg <- ar_eogreg(dat_basl, heog, veog)"},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"install-required-software","dir":"Articles","previous_headings":"","what":"Install required software","title":"Get started","text":"Download recent versions R RStudio: Open downloaded files follow installation instructions unsure, leave default options untouched","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"download-course-materials","dir":"Articles","previous_headings":"","what":"Download course materials","title":"Get started","text":"Download course materials Unzip directory choice (e.g., “Documents” folder)","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"open-the-course-materials","dir":"Articles","previous_headings":"","what":"Open the course materials","title":"Get started","text":"unzipped folder, double-click RStudio project file (eegSeminaR.Rproj) open new RStudio window “Files” pane (typically lower right-hand part screen), click folder vignettes open first vignette (cm1-introduction--r.Rmd)","code":""},{"path":"https://alexenge.github.io/eegSeminaR/articles/eegSeminaR.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Get started","text":"quick background info EEG event-related potentials (ERPs), see: Luck, S. J. (2022). brief introduction EEG ERPs. Applied event-related potential data analysis. LibreTexts. Link","code":""},{"path":"https://alexenge.github.io/eegSeminaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Enge. Author, maintainer, copyright holder.","code":""},{"path":"https://alexenge.github.io/eegSeminaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Enge (2022). eegSeminaR: Seminar Analyzing EEG Data R. https://github.com/alexenge/eegSeminaR, https://alexenge.github.io/eegSeminaR/.","code":"@Manual{,   title = {eegSeminaR: A Seminar on Analyzing EEG Data in R},   author = {Alexander Enge},   year = {2022},   note = {https://github.com/alexenge/eegSeminaR, https://alexenge.github.io/eegSeminaR/}, }"},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"id_-welcome","dir":"","previous_headings":"","what":"👋 Welcome","title":"A Seminar on Analyzing EEG Data in R","text":"MSc-level university seminar analyzing EEG data R. follows “code first” approach (using R package eegUtils1) teach basics event-related potentials (ERP) analysis, raw data statistical modeling visualization.","code":""},{"path":[]},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"a-interactive--local-recommended","dir":"","previous_headings":"⚙️ How to follow along","what":"a) Interactive – local (recommended)","title":"A Seminar on Analyzing EEG Data in R","text":"Follow instructions “Get started” page download install required software","code":""},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"b-interactive--cloud-server","dir":"","previous_headings":"⚙️ How to follow along","what":"b) Interactive – cloud server","title":"A Seminar on Analyzing EEG Data in R","text":"Hit link (“Launch binder” button top) open course materials cloud server kindly provided Binder project Note : () Launching cloud server might take couple minutes, (b) resources (CPUs memory) limited, (c) changes make code lost end session","code":""},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"c-static","dir":"","previous_headings":"⚙️ How to follow along","what":"c) Static","title":"A Seminar on Analyzing EEG Data in R","text":"Read static version course materials web browser allow run /modify code","code":""},{"path":"https://alexenge.github.io/eegSeminaR/index.html","id":"id_-course-content","dir":"","previous_headings":"","what":"🧭 Course content","title":"A Seminar on Analyzing EEG Data in R","text":"Intro R: Variables, data types, functions, packages Open data: Data sharing, BIDS standard, ERP CORE dataset Choose + download data ERP CORE experiment Preprocessing: Loading viewing data, re-referencing, filtering Creating epochs: Event codes, epoching, baseline correction Apply preprocessing epoching data Correcting artifacts: ICA, BESA, voltage thresholds Extracting amplitudes: Selecting time windows regions interest Apply artifact correction /rejection; extract single trial ERP amplitudes Statistics: ANOVA, mixed models, permutation tests Visualization: time course, topography Create least one statistical model plot; upload report Moodle Source localization Time-frequency analysis Multivariate analysis (decoding)","code":""},{"path":"https://alexenge.github.io/eegSeminaR/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://alexenge.github.io/eegSeminaR/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://alexenge.github.io/eegSeminaR/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> [1] \"Hello, world!\""}]
